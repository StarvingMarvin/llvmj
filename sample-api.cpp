// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
  // Module Construction
  Module* mod = new Module("/tmp/webcompile/_12570_0.bc", getGlobalContext());
  mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64");
  mod->setTargetTriple("x86_64-unknown-linux-gnu");
  
  // Type Definitions
  std::vector<const Type*>StructTy_struct_MJArray_fields;
  PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
  
  StructTy_struct_MJArray_fields.push_back(PointerTy_0);
  StructTy_struct_MJArray_fields.push_back(PointerTy_0);
  StructTy_struct_MJArray_fields.push_back(IntegerType::get(mod->getContext(), 32));
  StructType* StructTy_struct_MJArray = StructType::get(mod->getContext(), StructTy_struct_MJArray_fields, /*isPacked=*/false);
  mod->addTypeName("struct.MJArray", StructTy_struct_MJArray);
  
  ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
  
  PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
  
  ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 5);
  
  PointerType* PointerTy_4 = PointerType::get(ArrayTy_3, 0);
  
  ArrayType* ArrayTy_5 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 7);
  
  PointerType* PointerTy_6 = PointerType::get(ArrayTy_5, 0);
  
  std::vector<const Type*>FuncTy_7_args;
  FuncTy_7_args.push_back(IntegerType::get(mod->getContext(), 8));
  FunctionType* FuncTy_7 = FunctionType::get(
    /*Result=*/IntegerType::get(mod->getContext(), 32),
    /*Params=*/FuncTy_7_args,
    /*isVarArg=*/false);
  
  std::vector<const Type*>FuncTy_8_args;
  FuncTy_8_args.push_back(IntegerType::get(mod->getContext(), 32));
  FunctionType* FuncTy_8 = FunctionType::get(
    /*Result=*/IntegerType::get(mod->getContext(), 32),
    /*Params=*/FuncTy_8_args,
    /*isVarArg=*/false);
  
  std::vector<const Type*>FuncTy_9_args;
  PointerType* PointerTy_10 = PointerType::get(StructTy_struct_MJArray, 0);
  
  FuncTy_9_args.push_back(PointerTy_10);
  FunctionType* FuncTy_9 = FunctionType::get(
    /*Result=*/IntegerType::get(mod->getContext(), 32),
    /*Params=*/FuncTy_9_args,
    /*isVarArg=*/false);
  
  PointerType* PointerTy_11 = PointerType::get(PointerTy_0, 0);
  
  PointerType* PointerTy_12 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
  
  std::vector<const Type*>FuncTy_13_args;
  FunctionType* FuncTy_13 = FunctionType::get(
    /*Result=*/Type::getVoidTy(mod->getContext()),
    /*Params=*/FuncTy_13_args,
    /*isVarArg=*/false);
  
  std::vector<const Type*>FuncTy_15_args;
  FuncTy_15_args.push_back(PointerTy_0);
  FunctionType* FuncTy_15 = FunctionType::get(
    /*Result=*/IntegerType::get(mod->getContext(), 32),
    /*Params=*/FuncTy_15_args,
    /*isVarArg=*/false);
  
  PointerType* PointerTy_14 = PointerType::get(FuncTy_15, 0);
  
  std::vector<const Type*>FuncTy_16_args;
  FuncTy_16_args.push_back(IntegerType::get(mod->getContext(), 32));
  FuncTy_16_args.push_back(PointerTy_11);
  FunctionType* FuncTy_16 = FunctionType::get(
    /*Result=*/IntegerType::get(mod->getContext(), 32),
    /*Params=*/FuncTy_16_args,
    /*isVarArg=*/false);
  
  
  // Function Declarations
  
  Function* func_ord = Function::Create(
    /*Type=*/FuncTy_7,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"ord", mod); 
  func_ord->setCallingConv(CallingConv::C);
  AttrListPtr func_ord_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 1U; PAWI.Attrs = 0  | Attribute::SExt;
    Attrs.push_back(PAWI);
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::ReadNone;
    Attrs.push_back(PAWI);
    func_ord_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_ord->setAttributes(func_ord_PAL);
  
  Function* func_chr = Function::Create(
    /*Type=*/FuncTy_8,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"chr", mod); 
  func_chr->setCallingConv(CallingConv::C);
  AttrListPtr func_chr_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::ReadNone;
    Attrs.push_back(PAWI);
    func_chr_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_chr->setAttributes(func_chr_PAL);
  
  Function* func_len = Function::Create(
    /*Type=*/FuncTy_9,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"len", mod); 
  func_len->setCallingConv(CallingConv::C);
  AttrListPtr func_len_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 1U; PAWI.Attrs = 0  | Attribute::ByVal | Attribute::NoCapture;
    Attrs.push_back(PAWI);
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind | Attribute::ReadOnly;
    Attrs.push_back(PAWI);
    func_len_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_len->setAttributes(func_len_PAL);
  
  Function* func_mj_main = Function::Create(
    /*Type=*/FuncTy_13,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"mj_main", mod); 
  func_mj_main->setCallingConv(CallingConv::C);
  AttrListPtr func_mj_main_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
    Attrs.push_back(PAWI);
    func_mj_main_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_mj_main->setAttributes(func_mj_main_PAL);
  
  Function* func_puts = Function::Create(
    /*Type=*/FuncTy_15,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"puts", mod); // (external, no body)
  func_puts->setCallingConv(CallingConv::C);
  AttrListPtr func_puts_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 1U; PAWI.Attrs = 0  | Attribute::NoCapture;
    Attrs.push_back(PAWI);
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
    Attrs.push_back(PAWI);
    func_puts_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_puts->setAttributes(func_puts_PAL);
  
  Function* func_main = Function::Create(
    /*Type=*/FuncTy_16,
    /*Linkage=*/GlobalValue::ExternalLinkage,
    /*Name=*/"main", mod); 
  func_main->setCallingConv(CallingConv::C);
  AttrListPtr func_main_PAL;
  {
    SmallVector<AttributeWithIndex, 4> Attrs;
    AttributeWithIndex PAWI;
    PAWI.Index = 2U; PAWI.Attrs = 0  | Attribute::NoCapture;
    Attrs.push_back(PAWI);
    PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
    Attrs.push_back(PAWI);
    func_main_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
    
  }
  func_main->setAttributes(func_main_PAL);
  
  // Global Variable Declarations

  
  GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
  /*Type=*/ArrayTy_1,
  /*isConstant=*/true,
  /*Linkage=*/GlobalValue::PrivateLinkage,
  /*Initializer=*/0, // has initializer, specified below
  /*Name=*/".str");
  
  GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
  /*Type=*/ArrayTy_3,
  /*isConstant=*/true,
  /*Linkage=*/GlobalValue::PrivateLinkage,
  /*Initializer=*/0, // has initializer, specified below
  /*Name=*/".str1");
  
  GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
  /*Type=*/ArrayTy_5,
  /*isConstant=*/true,
  /*Linkage=*/GlobalValue::PrivateLinkage,
  /*Initializer=*/0, // has initializer, specified below
  /*Name=*/".str2");
  
  // Constant Definitions
  Constant* const_array_17 = ConstantArray::get(mod->getContext(), "a: ", true);
  Constant* const_array_18 = ConstantArray::get(mod->getContext(), "90: ", true);
  Constant* const_array_19 = ConstantArray::get(mod->getContext(), "size: ", true);
  ConstantInt* const_int32_20 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("24"), 10));
  ConstantInt* const_int64_21 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
  ConstantInt* const_int32_22 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
  ConstantInt* const_int32_23 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
  ConstantInt* const_int32_24 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
  std::vector<Constant*> const_ptr_25_indices;
  ConstantInt* const_int64_26 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("24"), 10));
  const_ptr_25_indices.push_back(const_int64_26);
  ConstantInt* const_int64_27 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
  const_ptr_25_indices.push_back(const_int64_27);
  Constant* const_ptr_25 = ConstantExpr::getGetElementPtr(gvar_array__str, &const_ptr_25_indices[0], const_ptr_25_indices.size());
  std::vector<Constant*> const_ptr_28_indices;
  ConstantInt* const_int64_29 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("18"), 10));
  const_ptr_28_indices.push_back(const_int64_29);
  const_ptr_28_indices.push_back(const_int64_21);
  Constant* const_ptr_28 = ConstantExpr::getGetElementPtr(gvar_array__str1, &const_ptr_28_indices[0], const_ptr_28_indices.size());
  std::vector<Constant*> const_ptr_30_indices;
  const_ptr_30_indices.push_back(const_int64_21);
  ConstantInt* const_int64_31 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("4"), 10));
  const_ptr_30_indices.push_back(const_int64_31);
  Constant* const_ptr_30 = ConstantExpr::getGetElementPtr(gvar_array__str2, &const_ptr_30_indices[0], const_ptr_30_indices.size());
  
  // Global Variable Definitions
  gvar_array__str->setInitializer(const_array_17);
  gvar_array__str1->setInitializer(const_array_18);
  gvar_array__str2->setInitializer(const_array_19);
  
  // Function Definitions
  
  // Function: ord (func_ord)
  {
    Function::arg_iterator args = func_ord->arg_begin();
    Value* int8_c = args++;
    int8_c->setName("c");
    
    BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_ord,0);
    
    // Block entry (label_entry)
    CastInst* int32_conv = new SExtInst(int8_c, IntegerType::get(mod->getContext(), 32), "conv", label_entry);
    ReturnInst::Create(mod->getContext(), int32_conv, label_entry);
    
  }
  
  // Function: chr (func_chr)
  {
    Function::arg_iterator args = func_chr->arg_begin();
    Value* int32_i = args++;
    int32_i->setName("i");
    
    BasicBlock* label_entry_33 = BasicBlock::Create(mod->getContext(), "entry",func_chr,0);
    
    // Block entry (label_entry_33)
    BinaryOperator* int32_sext = BinaryOperator::Create(Instruction::Shl, int32_i, const_int32_20, "sext", label_entry_33);
    BinaryOperator* int32_conv1 = BinaryOperator::Create(Instruction::AShr, int32_sext, const_int32_20, "conv1", label_entry_33);
    ReturnInst::Create(mod->getContext(), int32_conv1, label_entry_33);
    
  }
  
  // Function: len (func_len)
  {
    Function::arg_iterator args = func_len->arg_begin();
    Value* ptr_arr = args++;
    ptr_arr->setName("arr");
    
    BasicBlock* label_entry_35 = BasicBlock::Create(mod->getContext(), "entry",func_len,0);
    
    // Block entry (label_entry_35)
    std::vector<Value*> ptr_tmp_indices;
    ptr_tmp_indices.push_back(const_int64_21);
    ptr_tmp_indices.push_back(const_int32_22);
    Instruction* ptr_tmp = GetElementPtrInst::Create(ptr_arr, ptr_tmp_indices.begin(), ptr_tmp_indices.end(), "tmp", label_entry_35);
    LoadInst* ptr_tmp1 = new LoadInst(ptr_tmp, "tmp1", false, label_entry_35);
    std::vector<Value*> ptr_tmp2_indices;
    ptr_tmp2_indices.push_back(const_int64_21);
    ptr_tmp2_indices.push_back(const_int32_23);
    Instruction* ptr_tmp2 = GetElementPtrInst::Create(ptr_arr, ptr_tmp2_indices.begin(), ptr_tmp2_indices.end(), "tmp2", label_entry_35);
    LoadInst* ptr_tmp3 = new LoadInst(ptr_tmp2, "tmp3", false, label_entry_35);
    CastInst* int64_sub_ptr_lhs_cast = new PtrToIntInst(ptr_tmp1, IntegerType::get(mod->getContext(), 64), "sub.ptr.lhs.cast", label_entry_35);
    CastInst* int64_sub_ptr_rhs_cast = new PtrToIntInst(ptr_tmp3, IntegerType::get(mod->getContext(), 64), "sub.ptr.rhs.cast", label_entry_35);
    BinaryOperator* int64_sub_ptr_sub = BinaryOperator::Create(Instruction::Sub, int64_sub_ptr_lhs_cast, int64_sub_ptr_rhs_cast, "sub.ptr.sub", label_entry_35);
    std::vector<Value*> ptr_tmp4_indices;
    ptr_tmp4_indices.push_back(const_int64_21);
    ptr_tmp4_indices.push_back(const_int32_24);
    Instruction* ptr_tmp4 = GetElementPtrInst::Create(ptr_arr, ptr_tmp4_indices.begin(), ptr_tmp4_indices.end(), "tmp4", label_entry_35);
    LoadInst* int32_tmp5 = new LoadInst(ptr_tmp4, "tmp5", false, label_entry_35);
    CastInst* int64_conv = new SExtInst(int32_tmp5, IntegerType::get(mod->getContext(), 64), "conv", label_entry_35);
    BinaryOperator* int64_div = BinaryOperator::Create(Instruction::SDiv, int64_sub_ptr_sub, int64_conv, "div", label_entry_35);
    CastInst* int32_conv6 = new TruncInst(int64_div, IntegerType::get(mod->getContext(), 32), "conv6", label_entry_35);
    ReturnInst::Create(mod->getContext(), int32_conv6, label_entry_35);
    
  }
  
  // Function: mj_main (func_mj_main)
  {
    
    BasicBlock* label_entry_37 = BasicBlock::Create(mod->getContext(), "entry",func_mj_main,0);
    
    // Block entry (label_entry_37)
    CallInst* int32_call1 = CallInst::Create(func_puts, const_ptr_25, "call1", label_entry_37);
    int32_call1->setCallingConv(CallingConv::C);
    int32_call1->setTailCall(true);AttrListPtr int32_call1_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call1_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call1->setAttributes(int32_call1_PAL);
    
    CallInst* int32_call5 = CallInst::Create(func_puts, const_ptr_28, "call5", label_entry_37);
    int32_call5->setCallingConv(CallingConv::C);
    int32_call5->setTailCall(true);AttrListPtr int32_call5_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call5_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call5->setAttributes(int32_call5_PAL);
    
    CallInst* int32_call16 = CallInst::Create(func_puts, const_ptr_30, "call16", label_entry_37);
    int32_call16->setCallingConv(CallingConv::C);
    int32_call16->setTailCall(true);AttrListPtr int32_call16_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call16_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call16->setAttributes(int32_call16_PAL);
    
    ReturnInst::Create(mod->getContext(), label_entry_37);
    
  }
  
  // Function: main (func_main)
  {
    Function::arg_iterator args = func_main->arg_begin();
    Value* int32_argc = args++;
    int32_argc->setName("argc");
    Value* ptr_argv = args++;
    ptr_argv->setName("argv");
    
    BasicBlock* label_entry_39 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
    
    // Block entry (label_entry_39)
    CallInst* int32_call1_i = CallInst::Create(func_puts, const_ptr_25, "call1.i", label_entry_39);
    int32_call1_i->setCallingConv(CallingConv::C);
    int32_call1_i->setTailCall(true);AttrListPtr int32_call1_i_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call1_i_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call1_i->setAttributes(int32_call1_i_PAL);
    
    CallInst* int32_call5_i = CallInst::Create(func_puts, const_ptr_28, "call5.i", label_entry_39);
    int32_call5_i->setCallingConv(CallingConv::C);
    int32_call5_i->setTailCall(true);AttrListPtr int32_call5_i_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call5_i_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call5_i->setAttributes(int32_call5_i_PAL);
    
    CallInst* int32_call16_i = CallInst::Create(func_puts, const_ptr_30, "call16.i", label_entry_39);
    int32_call16_i->setCallingConv(CallingConv::C);
    int32_call16_i->setTailCall(true);AttrListPtr int32_call16_i_PAL;
    {
      SmallVector<AttributeWithIndex, 4> Attrs;
      AttributeWithIndex PAWI;
      PAWI.Index = 4294967295U; PAWI.Attrs = 0  | Attribute::NoUnwind;
      Attrs.push_back(PAWI);
      int32_call16_i_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
      
    }
    int32_call16_i->setAttributes(int32_call16_i_PAL);
    
    ReturnInst::Create(mod->getContext(), const_int32_23, label_entry_39);
    
  }
  
  return mod;
}

